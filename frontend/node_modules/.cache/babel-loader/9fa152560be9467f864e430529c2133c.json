{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT } from './types';\nexport const authenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify(localStorage.getItem('access'));\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/supersis03/Projects/dextera-project/frontend/src/actions/auth.js"],"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","authenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","type","logout","load_user","res","get","process","env","REACT_APP_API_URL","payload","data","err","login","email","password","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SACIC,aADJ,EAEIC,UAFJ,EAGIC,mBAHJ,EAIIC,gBAJJ,EAKIC,qBALJ,EAMIC,kBANJ,EAOIC,MAPJ,QAQO,SARP;AAUA,OAAO,MAAMC,aAAa,GAAG,MAAM,MAAMC,QAAN,IAAiB;AAChD,MAAIC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAJ,EAAoC;AAChC,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,kBAAU;AAFL;AADE,KAAf;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAf,CAAb;AACH,GARD,MAQK;AACDF,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGH;AAEJ,CAfM;AAgBP,OAAO,MAAMY,MAAM,GAAE,MAAMT,QAAQ,IAAG;AAClCA,EAAAA,QAAQ,CAAE;AACNQ,IAAAA,IAAI,EAAGV;AADD,GAAF,CAAR;AAGH,CAJM;AAMP,OAAO,MAAMY,SAAS,GAAG,MAAM,MAAMV,QAAN,IAAkB;AAC7C,MAAIC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAJ,EAAoC;AAChC,UAAMC,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACL,wBAAgB,kBADX;AAEL,yBAAkB,OAAMH,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA+B,EAFlD;AAGL,kBAAU;AAHL;AADE,KAAf;;AAQA,QAAI;AACA,YAAMS,GAAG,GAAG,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,iBAA3C,EAA6DZ,MAA7D,CAAlB;AAEAH,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEd,mBADD;AAELsB,QAAAA,OAAO,EAAEL,GAAG,CAACM;AAFR,OAAD,CAAR;AAIH,KAPD,CAOE,OAAOC,GAAP,EAAY;AACVlB,MAAAA,QAAQ,CAAC;AACLQ,QAAAA,IAAI,EAAEb;AADD,OAAD,CAAR;AAGH;AACJ,GArBD,MAqBO;AACHK,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEb;AADD,KAAD,CAAR;AAGH;AACJ,CA3BM;AA6BP,OAAO,MAAMwB,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB,MAAMrB,QAAN,IAAkB;AACxD,QAAMG,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAgB;AADZ;AADG,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACa,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMV,GAAG,GAAG,MAAMpB,KAAK,CAAC+B,IAAN,CAAY,GAAET,OAAO,CAACC,GAAR,CAAYC,iBAAkB,mBAA5C,EAAgEV,IAAhE,EAAsEF,MAAtE,CAAlB;AACCH,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEhB,aADD;AAELwB,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFR,KAAD,CAAR;AAIAjB,IAAAA,QAAQ,CAACU,SAAS,EAAV,CAAR;AACJ,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACVlB,IAAAA,QAAQ,CAAC;AACLQ,MAAAA,IAAI,EAAEf;AADD,KAAD,CAAR;AAGH;AACJ,CApBM","sourcesContent":["import axios from 'axios';\n\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    LOGOUT\n} from './types';\n\nexport const authenticated = () => async dispatch =>{\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }; \n        const body = JSON.stringify(localStorage.getItem('access'));\n    }else{\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        })\n    }\n\n}\nexport const logout =() => dispatch =>{\n    dispatch ({\n        type : LOGOUT\n    });\n}\n\nexport const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config = {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        }; \n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n    \n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\n\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-Type': 'application/json'\n\n    }};\n    const body = JSON.stringify({email, password});\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n         dispatch({\n             type: LOGIN_SUCCESS,\n             payload: res.data \n         });\n         dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL,\n        })\n    }\n};"]},"metadata":{},"sourceType":"module"}